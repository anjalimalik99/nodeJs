{"ast":null,"code":"import validator from 'validator';\nclass FormValidator {\n  constructor(validations) {\n    // validations is an array of validation rules specific to a form\n    this.validations = validations;\n  }\n  validate(state) {\n    // start out assuming valid\n    let validation = this.valid();\n\n    // for each validation rule\n    this.validations.forEach(rule => {\n      // if the field hasn't already been marked invalid by an earlier rule\n      if (!validation[rule.field].isInvalid) {\n        // determine the field value, the method to invoke and optional args from \n        // the rule definition\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method;\n\n        // call the validation_method with the current field value as the first\n        // argument, any additional arguments, and the whole state as a final\n        // argument.  If the result doesn't match the rule.validWhen property,\n        // then modify the validation object for the field and set the isValid\n        // field to false\n        if (validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = {\n            isInvalid: true,\n            message: rule.message\n          };\n          validation.isValid = false;\n        }\n      }\n    });\n    return validation;\n  }\n  valid() {\n    const validation = {};\n    this.validations.map(rule => validation[rule.field] = {\n      isInvalid: false,\n      message: ''\n    });\n    return {\n      isValid: true,\n      ...validation\n    };\n  }\n}\nexport default FormValidator;","map":{"version":3,"names":["validator","FormValidator","constructor","validations","validate","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map"],"sources":["/home/fa064104/work/Todolist-React-Node-mysql/frontend/src/components/FormValidator.js"],"sourcesContent":["import validator from 'validator';\n\nclass FormValidator {\n  constructor(validations) {\n    // validations is an array of validation rules specific to a form\n    this.validations = validations;\n  }\n\n  validate(state) {\n    // start out assuming valid\n    let validation = this.valid();\n\n    // for each validation rule\n    this.validations.forEach(rule => {\n\n      // if the field hasn't already been marked invalid by an earlier rule\n      if (!validation[rule.field].isInvalid) {\n        // determine the field value, the method to invoke and optional args from \n        // the rule definition\n        const field_value = state[rule.field].toString();\n        const args = rule.args || [];\n        const validation_method = \n              typeof rule.method === 'string' ?\n              validator[rule.method] : \n              rule.method\n              \n        // call the validation_method with the current field value as the first\n        // argument, any additional arguments, and the whole state as a final\n        // argument.  If the result doesn't match the rule.validWhen property,\n        // then modify the validation object for the field and set the isValid\n        // field to false\n        if(validation_method(field_value, ...args, state) !== rule.validWhen) {\n          validation[rule.field] = { isInvalid: true, message: rule.message }\n          validation.isValid = false;\n        }\n      }\n    });\n\n    return validation;\n  }\n\n  valid() {\n    const validation = {}\n\n    this.validations.map(rule => (\n      validation[rule.field] = { isInvalid: false, message: '' }\n    ));\n\n    return { isValid: true, ...validation };\n  }\n}\n\nexport default FormValidator;\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,WAAW;AAEjC,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAACC,WAAW,EAAE;IACvB;IACA,IAAI,CAACA,WAAW,GAAGA,WAAW;EAChC;EAEAC,QAAQA,CAACC,KAAK,EAAE;IACd;IACA,IAAIC,UAAU,GAAG,IAAI,CAACC,KAAK,CAAC,CAAC;;IAE7B;IACA,IAAI,CAACJ,WAAW,CAACK,OAAO,CAACC,IAAI,IAAI;MAE/B;MACA,IAAI,CAACH,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,CAACC,SAAS,EAAE;QACrC;QACA;QACA,MAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAK,CAAC,CAACG,QAAQ,CAAC,CAAC;QAChD,MAAMC,IAAI,GAAGL,IAAI,CAACK,IAAI,IAAI,EAAE;QAC5B,MAAMC,iBAAiB,GACjB,OAAON,IAAI,CAACO,MAAM,KAAK,QAAQ,GAC/BhB,SAAS,CAACS,IAAI,CAACO,MAAM,CAAC,GACtBP,IAAI,CAACO,MAAM;;QAEjB;QACA;QACA;QACA;QACA;QACA,IAAGD,iBAAiB,CAACH,WAAW,EAAE,GAAGE,IAAI,EAAET,KAAK,CAAC,KAAKI,IAAI,CAACQ,SAAS,EAAE;UACpEX,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG;YAAEC,SAAS,EAAE,IAAI;YAAEO,OAAO,EAAET,IAAI,CAACS;UAAQ,CAAC;UACnEZ,UAAU,CAACa,OAAO,GAAG,KAAK;QAC5B;MACF;IACF,CAAC,CAAC;IAEF,OAAOb,UAAU;EACnB;EAEAC,KAAKA,CAAA,EAAG;IACN,MAAMD,UAAU,GAAG,CAAC,CAAC;IAErB,IAAI,CAACH,WAAW,CAACiB,GAAG,CAACX,IAAI,IACvBH,UAAU,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG;MAAEC,SAAS,EAAE,KAAK;MAAEO,OAAO,EAAE;IAAG,CAC1D,CAAC;IAEF,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAE,GAAGb;IAAW,CAAC;EACzC;AACF;AAEA,eAAeL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}